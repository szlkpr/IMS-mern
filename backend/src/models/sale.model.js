//Enhanced Sales Record with Multi-item Invoicing
import mongoose from "mongoose";
import mongooseAggregatePaginate from "mongoose-aggregate-paginate-v2";

const soldProductsSchema = new mongoose.Schema({
    productId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Product",
        required: true,
    },
    quantity: {
        type: Number,
        required: true,
        min: 1
    },
    unitPrice: {
        type: Number,
        required: true,
        min: 0
    },
    totalPrice: {
        type: Number,
        required: true,
        min: 0
    },
    // For backward compatibility
    price: {
        type: Number,
        required: false
    }
});

const saleSchema = new mongoose.Schema({
    // Invoice Details
    invoiceNumber: {
        type: String,
        unique: true,
        required: false, // Will be generated by pre-save middleware
        sparse: true // Allows multiple null values during creation
    },
    
    // Products sold
    soldProducts: {
        type: [soldProductsSchema],
        required: true,
        validate: {
            validator: function(v) {
                return v && v.length > 0;
            },
            message: 'At least one product must be sold'
        }
    },
    
    // Pricing Details
    subtotal: {
        type: Number,
        required: true,
        min: 0
    },
    
    // Discount Information
    discountType: {
        type: String,
        enum: ['none', 'percentage', 'fixed'],
        default: 'none'
    },
    discountValue: {
        type: Number,
        default: 0,
        min: 0
    },
    discountAmount: {
        type: Number,
        default: 0,
        min: 0
    },
    
    // Tax Information (for future use)
    taxAmount: {
        type: Number,
        default: 0,
        min: 0
    },
    
    // Final amount
    totalAmount: {
        type: Number,
        required: false, // Will be calculated by pre-save middleware
        min: 0,
        default: 0
    },
    
    // For backward compatibility
    saleCost: {
        type: Number,
        required: false
    },
    
    // Customer Information
    customerName: {
        type: String,
        trim: true
    },
    customerContact: {
        type: String,
        trim: true
    },
    customerEmail: {
        type: String,
        trim: true,
        lowercase: true
    },
    customerAddress: {
        type: String,
        trim: true
    },
    
    // Payment Information
    paymentMethod: {
        type: String,
        enum: ['cash', 'card', 'upi', 'bank_transfer', 'cheque', 'other'],
        default: 'cash'
    },
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'partial', 'refunded'],
        default: 'paid'
    },
    
    // Additional Information
    notes: {
        type: String,
        trim: true
    },
    
    // Status
    status: {
        type: String,
        enum: ['draft', 'completed', 'cancelled', 'refunded'],
        default: 'completed'
    }
}, { 
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Pre-save middleware to generate invoice number and calculate totals
saleSchema.pre('save', async function(next) {
    try {
        // Generate invoice number if not provided
        if (!this.invoiceNumber) {
            const count = await this.constructor.countDocuments({});
            const currentYear = new Date().getFullYear();
            this.invoiceNumber = `INV-${currentYear}-${String(count + 1).padStart(6, '0')}`;
        }
        
        // Ensure each sold product has correct totalPrice and prices
        if (this.soldProducts && this.soldProducts.length > 0) {
            this.soldProducts.forEach(item => {
                // Ensure unitPrice is set
                if (!item.unitPrice && item.price) {
                    item.unitPrice = item.price;
                }
                // Calculate totalPrice
                item.totalPrice = (item.quantity || 0) * (item.unitPrice || 0);
                // Set price for backward compatibility
                item.price = item.unitPrice;
            });
        }
        
        // Calculate subtotal from soldProducts
        this.subtotal = this.soldProducts ? 
            this.soldProducts.reduce((sum, item) => sum + (item.totalPrice || 0), 0) : 0;
        
        // Set default discount values if not provided
        this.discountType = this.discountType || 'none';
        this.discountValue = this.discountValue || 0;
        
        // Calculate discount amount
        if (this.discountType === 'percentage') {
            this.discountAmount = (this.subtotal * this.discountValue) / 100;
        } else if (this.discountType === 'fixed') {
            this.discountAmount = Math.min(this.discountValue, this.subtotal);
        } else {
            this.discountAmount = 0;
        }
        
        // Ensure taxAmount is set
        this.taxAmount = this.taxAmount || 0;
        
        // Calculate final total
        this.totalAmount = this.subtotal - this.discountAmount + this.taxAmount;
        
        // Set saleCost for backward compatibility
        this.saleCost = this.totalAmount;
        
        next();
    } catch (error) {
        next(error);
    }
});

// Virtual for items count
saleSchema.virtual('itemsCount').get(function() {
    return this.soldProducts.reduce((sum, item) => sum + item.quantity, 0);
});

// Method to calculate savings
saleSchema.methods.getSavings = function() {
    return {
        discountAmount: this.discountAmount,
        discountPercentage: this.subtotal > 0 ? (this.discountAmount / this.subtotal) * 100 : 0
    };
};

// Static method to generate next invoice number
saleSchema.statics.generateInvoiceNumber = async function() {
    const count = await this.countDocuments({});
    const currentYear = new Date().getFullYear();
    return `INV-${currentYear}-${String(count + 1).padStart(6, '0')}`;
};

saleSchema.plugin(mongooseAggregatePaginate);

export const Sale = mongoose.model("Sale", saleSchema);
